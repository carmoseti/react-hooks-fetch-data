/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as PublicImport } from './routes/_public'
import { Route as FetchDataWithLoaderImport } from './routes/fetch-data/with-loader'
import { Route as FetchDataWithFormImport } from './routes/fetch-data/with-form'
import { Route as FetchDataWithErrorHandlingImport } from './routes/fetch-data/with-error-handling'
import { Route as FetchDataWithAbortImport } from './routes/fetch-data/with-abort'
import { Route as FetchDataUsingReactQueryImport } from './routes/fetch-data/using-react-query'
import { Route as FetchDataUsingCustomHookImport } from './routes/fetch-data/using-custom-hook'
import { Route as FetchDataRefetchImport } from './routes/fetch-data/refetch'
import { Route as FetchDataFromStateImport } from './routes/fetch-data/from-state'

// Create/Update Routes

const PublicRoute = PublicImport.update({
  id: '/_public',
  getParentRoute: () => rootRoute,
} as any)

const FetchDataWithLoaderRoute = FetchDataWithLoaderImport.update({
  id: '/fetch-data/with-loader',
  path: '/fetch-data/with-loader',
  getParentRoute: () => rootRoute,
} as any)

const FetchDataWithFormRoute = FetchDataWithFormImport.update({
  id: '/fetch-data/with-form',
  path: '/fetch-data/with-form',
  getParentRoute: () => rootRoute,
} as any)

const FetchDataWithErrorHandlingRoute = FetchDataWithErrorHandlingImport.update(
  {
    id: '/fetch-data/with-error-handling',
    path: '/fetch-data/with-error-handling',
    getParentRoute: () => rootRoute,
  } as any,
)

const FetchDataWithAbortRoute = FetchDataWithAbortImport.update({
  id: '/fetch-data/with-abort',
  path: '/fetch-data/with-abort',
  getParentRoute: () => rootRoute,
} as any)

const FetchDataUsingReactQueryRoute = FetchDataUsingReactQueryImport.update({
  id: '/fetch-data/using-react-query',
  path: '/fetch-data/using-react-query',
  getParentRoute: () => rootRoute,
} as any)

const FetchDataUsingCustomHookRoute = FetchDataUsingCustomHookImport.update({
  id: '/fetch-data/using-custom-hook',
  path: '/fetch-data/using-custom-hook',
  getParentRoute: () => rootRoute,
} as any)

const FetchDataRefetchRoute = FetchDataRefetchImport.update({
  id: '/fetch-data/refetch',
  path: '/fetch-data/refetch',
  getParentRoute: () => rootRoute,
} as any)

const FetchDataFromStateRoute = FetchDataFromStateImport.update({
  id: '/fetch-data/from-state',
  path: '/fetch-data/from-state',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_public': {
      id: '/_public'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PublicImport
      parentRoute: typeof rootRoute
    }
    '/fetch-data/from-state': {
      id: '/fetch-data/from-state'
      path: '/fetch-data/from-state'
      fullPath: '/fetch-data/from-state'
      preLoaderRoute: typeof FetchDataFromStateImport
      parentRoute: typeof rootRoute
    }
    '/fetch-data/refetch': {
      id: '/fetch-data/refetch'
      path: '/fetch-data/refetch'
      fullPath: '/fetch-data/refetch'
      preLoaderRoute: typeof FetchDataRefetchImport
      parentRoute: typeof rootRoute
    }
    '/fetch-data/using-custom-hook': {
      id: '/fetch-data/using-custom-hook'
      path: '/fetch-data/using-custom-hook'
      fullPath: '/fetch-data/using-custom-hook'
      preLoaderRoute: typeof FetchDataUsingCustomHookImport
      parentRoute: typeof rootRoute
    }
    '/fetch-data/using-react-query': {
      id: '/fetch-data/using-react-query'
      path: '/fetch-data/using-react-query'
      fullPath: '/fetch-data/using-react-query'
      preLoaderRoute: typeof FetchDataUsingReactQueryImport
      parentRoute: typeof rootRoute
    }
    '/fetch-data/with-abort': {
      id: '/fetch-data/with-abort'
      path: '/fetch-data/with-abort'
      fullPath: '/fetch-data/with-abort'
      preLoaderRoute: typeof FetchDataWithAbortImport
      parentRoute: typeof rootRoute
    }
    '/fetch-data/with-error-handling': {
      id: '/fetch-data/with-error-handling'
      path: '/fetch-data/with-error-handling'
      fullPath: '/fetch-data/with-error-handling'
      preLoaderRoute: typeof FetchDataWithErrorHandlingImport
      parentRoute: typeof rootRoute
    }
    '/fetch-data/with-form': {
      id: '/fetch-data/with-form'
      path: '/fetch-data/with-form'
      fullPath: '/fetch-data/with-form'
      preLoaderRoute: typeof FetchDataWithFormImport
      parentRoute: typeof rootRoute
    }
    '/fetch-data/with-loader': {
      id: '/fetch-data/with-loader'
      path: '/fetch-data/with-loader'
      fullPath: '/fetch-data/with-loader'
      preLoaderRoute: typeof FetchDataWithLoaderImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '': typeof PublicRoute
  '/fetch-data/from-state': typeof FetchDataFromStateRoute
  '/fetch-data/refetch': typeof FetchDataRefetchRoute
  '/fetch-data/using-custom-hook': typeof FetchDataUsingCustomHookRoute
  '/fetch-data/using-react-query': typeof FetchDataUsingReactQueryRoute
  '/fetch-data/with-abort': typeof FetchDataWithAbortRoute
  '/fetch-data/with-error-handling': typeof FetchDataWithErrorHandlingRoute
  '/fetch-data/with-form': typeof FetchDataWithFormRoute
  '/fetch-data/with-loader': typeof FetchDataWithLoaderRoute
}

export interface FileRoutesByTo {
  '': typeof PublicRoute
  '/fetch-data/from-state': typeof FetchDataFromStateRoute
  '/fetch-data/refetch': typeof FetchDataRefetchRoute
  '/fetch-data/using-custom-hook': typeof FetchDataUsingCustomHookRoute
  '/fetch-data/using-react-query': typeof FetchDataUsingReactQueryRoute
  '/fetch-data/with-abort': typeof FetchDataWithAbortRoute
  '/fetch-data/with-error-handling': typeof FetchDataWithErrorHandlingRoute
  '/fetch-data/with-form': typeof FetchDataWithFormRoute
  '/fetch-data/with-loader': typeof FetchDataWithLoaderRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_public': typeof PublicRoute
  '/fetch-data/from-state': typeof FetchDataFromStateRoute
  '/fetch-data/refetch': typeof FetchDataRefetchRoute
  '/fetch-data/using-custom-hook': typeof FetchDataUsingCustomHookRoute
  '/fetch-data/using-react-query': typeof FetchDataUsingReactQueryRoute
  '/fetch-data/with-abort': typeof FetchDataWithAbortRoute
  '/fetch-data/with-error-handling': typeof FetchDataWithErrorHandlingRoute
  '/fetch-data/with-form': typeof FetchDataWithFormRoute
  '/fetch-data/with-loader': typeof FetchDataWithLoaderRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/fetch-data/from-state'
    | '/fetch-data/refetch'
    | '/fetch-data/using-custom-hook'
    | '/fetch-data/using-react-query'
    | '/fetch-data/with-abort'
    | '/fetch-data/with-error-handling'
    | '/fetch-data/with-form'
    | '/fetch-data/with-loader'
  fileRoutesByTo: FileRoutesByTo
  to:
    | ''
    | '/fetch-data/from-state'
    | '/fetch-data/refetch'
    | '/fetch-data/using-custom-hook'
    | '/fetch-data/using-react-query'
    | '/fetch-data/with-abort'
    | '/fetch-data/with-error-handling'
    | '/fetch-data/with-form'
    | '/fetch-data/with-loader'
  id:
    | '__root__'
    | '/_public'
    | '/fetch-data/from-state'
    | '/fetch-data/refetch'
    | '/fetch-data/using-custom-hook'
    | '/fetch-data/using-react-query'
    | '/fetch-data/with-abort'
    | '/fetch-data/with-error-handling'
    | '/fetch-data/with-form'
    | '/fetch-data/with-loader'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  PublicRoute: typeof PublicRoute
  FetchDataFromStateRoute: typeof FetchDataFromStateRoute
  FetchDataRefetchRoute: typeof FetchDataRefetchRoute
  FetchDataUsingCustomHookRoute: typeof FetchDataUsingCustomHookRoute
  FetchDataUsingReactQueryRoute: typeof FetchDataUsingReactQueryRoute
  FetchDataWithAbortRoute: typeof FetchDataWithAbortRoute
  FetchDataWithErrorHandlingRoute: typeof FetchDataWithErrorHandlingRoute
  FetchDataWithFormRoute: typeof FetchDataWithFormRoute
  FetchDataWithLoaderRoute: typeof FetchDataWithLoaderRoute
}

const rootRouteChildren: RootRouteChildren = {
  PublicRoute: PublicRoute,
  FetchDataFromStateRoute: FetchDataFromStateRoute,
  FetchDataRefetchRoute: FetchDataRefetchRoute,
  FetchDataUsingCustomHookRoute: FetchDataUsingCustomHookRoute,
  FetchDataUsingReactQueryRoute: FetchDataUsingReactQueryRoute,
  FetchDataWithAbortRoute: FetchDataWithAbortRoute,
  FetchDataWithErrorHandlingRoute: FetchDataWithErrorHandlingRoute,
  FetchDataWithFormRoute: FetchDataWithFormRoute,
  FetchDataWithLoaderRoute: FetchDataWithLoaderRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_public",
        "/fetch-data/from-state",
        "/fetch-data/refetch",
        "/fetch-data/using-custom-hook",
        "/fetch-data/using-react-query",
        "/fetch-data/with-abort",
        "/fetch-data/with-error-handling",
        "/fetch-data/with-form",
        "/fetch-data/with-loader"
      ]
    },
    "/_public": {
      "filePath": "_public.tsx"
    },
    "/fetch-data/from-state": {
      "filePath": "fetch-data/from-state.tsx"
    },
    "/fetch-data/refetch": {
      "filePath": "fetch-data/refetch.tsx"
    },
    "/fetch-data/using-custom-hook": {
      "filePath": "fetch-data/using-custom-hook.tsx"
    },
    "/fetch-data/using-react-query": {
      "filePath": "fetch-data/using-react-query.tsx"
    },
    "/fetch-data/with-abort": {
      "filePath": "fetch-data/with-abort.tsx"
    },
    "/fetch-data/with-error-handling": {
      "filePath": "fetch-data/with-error-handling.tsx"
    },
    "/fetch-data/with-form": {
      "filePath": "fetch-data/with-form.tsx"
    },
    "/fetch-data/with-loader": {
      "filePath": "fetch-data/with-loader.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
